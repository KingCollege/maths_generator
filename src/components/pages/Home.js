import React from 'react';
import styled from 'styled-components';

import presets from '../presets';
import { connect } from 'react-redux';
import { maths_api_request, CATEGORIES, QUESTIONS } from '../../redux/actions/MathsAPIAction';

class Home extends React.Component {
    constructor(props) {
        super();
        this.maths_api_category_url = 'https://maths-generator.herokuapp.com/maths/year4/categories?pretty';
    }

    componentDidMount() {
        this.props.maths_api_request(this.maths_api_category_url, CATEGORIES);
    }

    componentDidUpdate() {
        console.log(this.props.categories, this.props.questions);
    }

    call_api(api) {
        this.props.maths_api_request(api, QUESTIONS);
    }

    render() {
        return (
            <Container className="hide-scroll">
                <ContentContainer>
                    <HeaderSection>
                        <Title>Welcome to RMathematics ._</Title>
                    </HeaderSection>
                    <MainSection>
                        <SubSection>
                            <Text>
                                This is a web application for randomly generated maths papers. Currently under
                                "construction", more features will be coming in the near future ._
                            </Text>
                            <Text>
                                Source code is readily available on my{' '}
                                <a href={'https://github.com/KingCollege'}>github page </a> ._
                            </Text>
                        </SubSection>
                        <GridContainer>
                            <SubSection>
                                <SubTitle>User Guide ._</SubTitle>
                                <Text>
                                    Navigate to "Application" or press the button below to access the application. From
                                    there you will be given options for what type of question you want in your paper ._
                                </Text>
                                <Button>
                                    <Text>To Application</Text>
                                </Button>
                                <Text>
                                    Questions are generated by an API. Below is a list of api requests, tap any of them
                                    to see what they return:
                                </Text>
                                {Object.values(this.props.categories).map((c) => {
                                    return (
                                        <Text
                                            code={true}
                                            className="select-all"
                                            key={c.api}
                                            onClick={() => this.call_api(c.api)}
                                        >
                                            {c.api}
                                        </Text>
                                    );
                                })}
                            </SubSection>
                            <SubSection>
                                <PreText>{JSON.stringify(this.props.questions, null, 2)}</PreText>
                            </SubSection>
                        </GridContainer>
                    </MainSection>
                    <FooterSection>
                        <SubText>contact: mandushi.18@gmail.com</SubText>
                    </FooterSection>
                </ContentContainer>
            </Container>
        );
    }
}

const Button = styled.button`
    border: 1px solid ${presets.color_scheme.grey};
    background-color: ${presets.color_scheme.blue};
    max-width: 200px;
    &:hover {
        background-color: ${presets.color_scheme.blue};
        border: 1px solid ${presets.color_scheme.grey};
    }

    &:active {
        background-color: ${presets.color_scheme.grey};
        border: 1px solid ${presets.color_scheme.grey};
    }

    p {
        color: ${presets.color_scheme.white} !important;
    }
`;

const Container = styled.div`
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    background-color: transparent;
    overflow: auto;
`;

const ContentContainer = styled.div`
    position: absolute;
    width: 80%;
    display: flex;
    flex-direction: column;
`;

const GridContainer = styled.div`
    display: grid;
    width: 100%;
    grid-template-columns: 1fr 1fr;

    @media only screen and (max-width: 700px) {
        display: flex;
        flex-direction: column;
    }
`;

const Title = styled.p`
    font-size: ${presets.font_size.title}px;
    color: ${presets.color_scheme.dark_grey};
    font-weight: bold;
    @media only screen and (max-width: 700px) {
        font-size: ${presets.font_size.title - 3}px;
    }
`;

const SubTitle = styled.p`
    font-size: ${presets.font_size.sub_title}px;
    color: ${presets.color_scheme.dark_grey};
    font-weight: bold;
`;

const Text = styled.p`
    font-size: ${presets.font_size.text}px;
    color: ${(props) => (props.code ? presets.color_scheme.white : presets.color_scheme.dark_grey)};
    background-color: ${(props) => (props.code ? presets.color_scheme.blue : 'transparent')};
    padding: ${(props) => (props.code ? 5 : 0)}px;
    max-width: 500px;
    word-break: break-all;

    @media only screen and (max-width: 700px) {
        font-size: ${presets.font_size.text - 3}px;
    }
`;

const PreText = styled.pre`
    display: flex;
    font-size: ${presets.font_size.text}px;
    color: ${presets.color_scheme.white};
    background-color: ${presets.color_scheme.blue};
    max-width: 500px;
    overflow: auto;
    padding: 5px;

    @media only screen and (max-width: 700px) {
        font-size: ${presets.font_size.text - 3}px;
    }
`;

const SubText = styled.p`
    font-size: ${presets.font_size.sub_text}px;
    color: ${presets.color_scheme.dark_grey};
    margin: 5px 0 0 0;
`;

const HeaderSection = styled.div`
    display: flex;
    justify-content: flex-start;
    align-items: flex-end;
    border-bottom: 1px solid ${presets.color_scheme.grey};
`;

const MainSection = styled.div`
    width: 100%;
    min-height: 900px;
    display: flex;
    flex-direction: column;
    background-color: transparent;
`;

const SubSection = styled.div`
    display: flex;
    flex-direction: column;
    width: 100%;
    border-bottom: 1px solid ${presets.color_scheme.grey};
`;

const FooterSection = styled.div`
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
`;

const mapStateToProps = (state) => ({
    categories: state.maths_api.categories,
    questions: state.maths_api.questions,
});

const mapDispatchToProps = (dispatch) => ({
    maths_api_request: (url, type) => dispatch(maths_api_request(url, type)),
});

export default connect(mapStateToProps, mapDispatchToProps)(Home);
